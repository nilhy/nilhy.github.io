<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Swift 粒子动画CAEmitterLayer简单使用]]></title>
    <url>%2F2019%2F04%2F22%2FiOS%2FCoreAnimation%2FCAEmitter%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[粒子系统介绍 什么是粒子系统？ 粒子系统是由总体具有相同的表现规律，个体却随机表现出不同的特征的大量显示元素构成的集合。 粒子定义有三要素 群体性：粒子系统是由“大量显示元素”构成的(例如雪、雨、一团雾等等) 统一性：粒子系统的每个元素具有相同的表现规律(例如下雨、下雪，方向都是从上向下) 随机性：粒子系统的每个元素又随机表现出不同特征(例如下雪，每个雪花下落的速度会有不同，大小会有不同、方向也会有略微的不同) 粒子系统应用场景 影视行业 目前我们经常看的大片，比如沙尘暴、暴风雨、暴雪、烟花 等等，很多都是粒子特效做出来的。很逼真，而且相比真实世界中去实拍，成本要低很多 游戏中 爆炸、雨、雪、雾、烟花等等。都是粒子系统实现 应用中 主播房间右下角粒子动画 雪花/下雨/烟花等效果 QQ生日快乐一堆表情的跳动 粒子系统的使用 步骤 创建发射器 创建粒子, 设置粒子属性 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859protocol Emitterable &#123; &#125;extension Emitterable where Self : UIViewController &#123; func startEmittering(_ point : CGPoint) &#123; // 1.创建发射器 let emitter = CAEmitterLayer() // 2.设置发射器的位置 emitter.emitterPosition = point // 3.开启三维效果 emitter.preservesDepth = true // 4.创建粒子, 并且设置例子相关的属性 let cell = CAEmitterCell() // 4.2.设置粒子速度 cell.velocity = 150 cell.velocityRange = 100 // 4.3.设置例子的大小 cell.scale = 0.7 cell.scaleRange = 0.3 // 4.4.设置粒子方向 cell.emissionLongitude = CGFloat.pi / 2 cell.emissionRange = CGFloat.pi / 6 // 4.5.设置例子的存活时间 cell.lifetime = 3 cell.lifetimeRange = 1.5 // 4.6.设置粒子旋转 cell.spin = CGFloat.pi / 2 cell.spinRange = CGFloat.pi / 4 // 4.6.设置例子每秒弹出的个数 cell.birthRate = 2 // 4.7.设置粒子展示的图片 cell.contents = UIImage(named: "imageName")?.cgImage // 5.将粒子设置到发射器中 emitter.emitterCells = [cell] // 6.将发射器的layer添加到父layer中 view.layer.addSublayer(emitter) &#125; /// 移除CAEmitterLayer func stopEmittering() &#123; view.layer.sublayers?.filter(&#123; $0.isKind(of: CAEmitterLayer.self)&#125;).first?.removeFromSuperlayer() &#125;&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>粒子动画</tag>
        <tag>CAEmitterLayer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS全屏手势POP]]></title>
    <url>%2F2019%2F04%2F21%2FfullScreenPop.html</url>
    <content type="text"><![CDATA[开篇在iOS中,默认如果有导航控制器,当push到下一个控制器时,当前界面时可以局部侧滑返回的,这一段范围很少. 既然系统已经给我们了实现好了,侧滑返回,那么我们如何解决,全屏手势侧滑返回呢? 方案拿到系统的返回手势,操作一波runtime 打印导航控制器所有私有属性123456789/// 通过runtime获取对应的手势属性var count : UInt32 = 0let ivars = class_copyIvarList(UIGestureRecognizer.self, &amp;count)!for i in 0..&lt;count &#123; let ivar = ivars[Int(i)] let namep = ivar_getName(ivar) let name = String(cString: namep!)//属性名称 print(name)&#125; 打印结果: 1234567891011121314151617181920212223242526_gestureFlags_targets // 这个保存手势的所有target_delayedTouches_delayedPresses_view_lastTouchTimestamp_firstEventTimestamp_state_allowedTouchTypes_initialTouchType_internalActiveTouches_forceClassifier_requiredPreviewForceState_touchForceObservable_touchForceObservableAndClassifierObservation_forceTargets_forcePressCount_beganObservable_failureRequirements_failureDependents_activeEvents_keepTouchesOnContinuation_delegate_allowedPressTypes_name_gestureEnvironment 获取target123456guard let anyObject = interactivePopGestureRecognizer!.value(forKey: "_targets") as? [AnyObject] else &#123; return &#125;let object = anyObject.firstprint(object) 打印结果: 12/// 原来是一个数组,数组中是一个tuple, tuple第一个是一个action,第二个既然是target对象[(action=handleNavigationTransition:, target=&lt;_UINavigationInteractiveTransition 0x7fc664e4f850&gt;)] KVC 取出target12345let target = object.value(forKeyPath: "target")let action = Selector(("handleNavigationTransition:"))//下面是获取不到action的会奔溃//let action = object.value(forKeyPath: "action") as? Selector 替换手势123//创建自己的手势 将系统的手势去代替自己创建的手势let panGes = UIPanGestureRecognizer(target: target, action: action)view.addGestureRecognizer(panGes) 使用FDFullscreenPopGesture这玩意就补多少了,添加进去,啥都不用干,懒人方案,完美解决。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Pop</tag>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac 上配置 aria2 加快下载速度的方法]]></title>
    <url>%2F2019%2F04%2F18%2Faria2_config.html</url>
    <content type="text"><![CDATA[作为mac 用户,受够了各种下载限速，浏览器自带的下载器极为蛋疼，不如花点时间来配置 aria2，结合 Chrome 插件配置之后,真香! aria2 是什么？aria2 是一款支持多种协议的轻量级命令行下载工具。有以下特性： 多线程连线：aria2 会自动从多个线程下载文件，并充分利用你的带宽。 轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 4MB~9MB ，使用 BitTorrent 协议，下行速度 2.8MB/s 时 CPU 占用率约 6% 。 全功能 BitTorrent 客户端。 支持 RPC 界面远程控制。 安装 Homebrew由于是使用 Homebrew 方式安装，所以需要先安装 Homebrew ，已经装过了可以跳过这一步，终端输入以下命令安装。 1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装 aria2在终端输入以下命令安装。1brew install aria2 设置配置文件aria2 提供两种方式使用，一种是直接命令行模式下载，不推荐使用这种方法，推荐使用另外一种 RPC 模式，这种方式 aria2 启动之后只会安静的等待下载请求，下载完成后也只会安静的驻留后台不会自动退出。而使用 RPC 模式推荐做一个配置文件方便使用。 我们把配置文件放在 ~/.aria2 下，终端依次输入以下命令： 1234cd ~mkdir .aria2cd .aria2touch aria2.conf 接着打开 Finder，利用 shift + command + G 进入路径：~/.aria2/aria2.conf，用文本编辑器打开 aria2.conf，将 雪月秋水君 提供的以下配置直接拷贝进去： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#用户名#rpc-user=user#密码#rpc-passwd=passwd#上面的认证方式不建议使用,建议使用下面的token方式#设置加密的密钥#rpc-secret=token#允许rpcenable-rpc=true#允许所有来源, web界面跨域权限需要rpc-allow-origin-all=true#允许外部访问，false的话只监听本地端口rpc-listen-all=true#RPC端口, 仅当默认端口被占用时修改#rpc-listen-port=6800#最大同时下载数(任务数), 路由建议值: 3max-concurrent-downloads=5#断点续传continue=true#同服务器连接数max-connection-per-server=5#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要min-split-size=10M#单文件最大线程数, 路由建议值: 5split=10#下载速度限制max-overall-download-limit=0#单文件速度限制max-download-limit=0#上传速度限制max-overall-upload-limit=0#单文件速度限制max-upload-limit=0#断开速度过慢的连接#lowest-speed-limit=0#验证用，需要1.16.1之后的release版本#referer=*#文件保存路径, 默认为当前启动位置dir=/Users/xxx/Downloads#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本#disk-cache=0#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)#enable-mmap=true#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持file-allocation=prealloc 默认下载路径的 /Users/xxx/Downloads 可以改为任何你想要的绝对路径。此处写为 Downloads 目录，xxx 请自行替换成你的 mac 用户名，然后保存，退出编辑器。 启动 RPC 模式在终端输入以下命令启动 RPC 模式，将 xxx 替换成你的 mac 用户名。 1aria2c --conf-path=&quot;/Users/xxx/.aria2/aria2.conf&quot; -D 开始使用下载 chrome 浏览器下载插件：Camtd - Aria2下载管理器, 下载完成后右键下载链接点击 Send to Aria2 即可下载，也支持拦截下载。 这个插件不满意的话，也可以搜索其他类似插件，但必须启动 RPC 模式才能够使用此类插件。 文章参考 Mac 上使用百度网盘很烦躁？花点时间配置 aria2 吧 。]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS跳转到AppStore常用方法]]></title>
    <url>%2F2018%2F03%2F19%2FJump2AppStoreMethod.html</url>
    <content type="text"><![CDATA[跳转到 AppStore 的常用方法，以下网址中将 id 后面的数字改为自己 App 的 id 即可。 1.通过Safari 输入网址跳转到 AppStore http://itunes.apple.com/us/app/id1234567890 2.App 内部通过代码直接跳转到 AppStore itms-apps://itunes.apple.com/cn/app/jie-zou-da-shi/id1234567890?mt=8 3.App 内部通过代码跳转到 AppStore 的评论区 itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;id=1234567890 代码1234567891011121314151617/// appid替换成自己的appid let appid : String = "1234567890"/// URL替换成上面所提供的URLlet urlStirng = "itms-apps://itunes.apple.com/cn/app/jie-zou-da-shi/id\(appid)?mt=8" if #available(iOS 10, *) &#123; if let url = URL(string: urlStirng) , UIApplication.shared.canOpenURL(url) &#123; UIApplication.shared.open(url, options: [:], completionHandler: nil) &#125;&#125; else &#123; if let url = URL(string: urlStirng) , UIApplication.shared.canOpenURL(url) &#123; UIApplication.shared.openURL(url) &#125;&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>AppStore</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用 iTunes 接口检查App版本更新]]></title>
    <url>%2F2018%2F01%2F16%2FiOS%2FAppStore%2F%E5%88%A9%E7%94%A8iTunes%E6%8E%A5%E5%8F%A3%E6%A3%80%E6%9F%A5App%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0.html</url>
    <content type="text"><![CDATA[iOS 想要检查 App 当前版本是否为最新，一般的方案大概都是服务器自己提供一个接口来获取 App 最新版本是多少，然后再做出相应提示是否需要更新，但是接口需要手动维护，应用要审核，还得等审核通过以后才能更新版本号，其实苹果提供了一个 iTunes 接口，能够查到 App 在 AppStore 上的状态信息，既省事又准确，下面记录一下具体实现方法。 接口信息URLiTunes 接口地址 有兴趣可以看一下，我们要用到的接口如下，xxx 处换成自己 App 的 AppId ，AppId 可以在 iTunes Connect 里面看到。 1http://itunes.apple.com/lookup?id=xxx Response JSON123456789101112131415&#123; "resultCount" : 1, "results" : [&#123; "artistId" : "开发者 ID", "artistName" : "开发者名称", "trackCensoredName" : "审查名称", "trackContentRating" : "评级", "trackId" : "应用程序 ID", "trackName" : "应用程序名称", "trackViewUrl" : "应用程序下载网址", "userRatingCount" : "用户评论数量", "userRatingCountForCurrentVersion" : "当前版本的用户评论数量", "version" : "版本号" &#125;]&#125; 实现方法下面是检查版本更新的具体实现方法，注意接口地址 xxx 处换成自己 App 的 AppId 开始请求 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/// 检查版本更新- (void)checkVersion &#123; NSString *url = @"http://itunes.apple.com/lookup?id=xxx"; [[AFHTTPSessionManager manager] POST:url parameters:nil progress:nil success:^(NSURLSessionDataTask *task, id responseObject) &#123; DLog(@"版本更新检查成功"); NSArray *results = responseObject[@"results"]; if (results &amp;&amp; results.count &gt; 0) &#123; NSDictionary *response = results.firstObject; NSString *currentVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"]; // 软件的当前版本 NSString *lastestVersion = response[@"version"]; // AppStore 上软件的最新版本 if (currentVersion &amp;&amp; lastestVersion &amp;&amp; ![self isLastestVersion:currentVersion compare:lastestVersion]) &#123; // 给出提示是否前往 AppStore 更新 UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"提示" message:@"检测到有版本更新，是否前往 AppStore 更新版本。" preferredStyle:UIAlertControllerStyleAlert]; [alert addAction:[UIAlertAction actionWithTitle:@"前往" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) &#123; NSString *trackViewUrl = response[@"trackViewUrl"]; // AppStore 上软件的地址 if (trackViewUrl) &#123; NSURL *appStoreURL = [NSURL URLWithString:trackViewUrl]; if ([[UIApplication sharedApplication] canOpenURL:appStoreURL]) &#123; [[UIApplication sharedApplication] openURL:appStoreURL]; &#125; &#125; &#125;]]; [alert addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil]]; [self.window.rootViewController presentViewController:alert animated:YES completion:nil]; &#125; &#125; &#125; failure:^(NSURLSessionDataTask *task, NSError *error) &#123; DLog(@"版本更新检查失败"); &#125;];&#125; /// 判断是否最新版本号（大于或等于为最新）- (BOOL)isLastestVersion:(NSString *)currentVersion compare:(NSString *)lastestVersion &#123; if (currentVersion &amp;&amp; lastestVersion) &#123; // 拆分成数组 NSMutableArray *currentItems = [[currentVersion componentsSeparatedByString:@"."] mutableCopy]; NSMutableArray *lastestItems = [[lastestVersion componentsSeparatedByString:@"."] mutableCopy]; // 如果数量不一样补0 NSInteger currentCount = currentItems.count; NSInteger lastestCount = lastestItems.count; if (currentCount != lastestCount) &#123; NSInteger count = labs(currentCount - lastestCount); // 取绝对值 for (int i = 0; i &lt; count; ++i) &#123; if (currentCount &gt; lastestCount) &#123; [lastestItems addObject:@"0"]; &#125; else &#123; [currentItems addObject:@"0"]; &#125; &#125; &#125; // 依次比较 BOOL isLastest = YES; for (int i = 0; i &lt; currentItems.count; ++i) &#123; NSString *currentItem = currentItems[i]; NSString *lastestItem = lastestItems[i]; if (currentItem.integerValue != lastestItem.integerValue) &#123; isLastest = currentItem.integerValue &gt; lastestItem.integerValue; break; &#125; &#125; return isLastest; &#125; return NO;&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>版本更新</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift-重写与重载的使用和比较]]></title>
    <url>%2F2017%2F10%2F03%2FiOS%2FSwift%2FSwift-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%AF%94%E8%BE%83.html</url>
    <content type="text"><![CDATA[1.重载: 函数名相同，参数名;参数类型;参数个数不同 重载函数并不仅仅局限于构造函数 函数重载是面相对象程序设计语言的重要标志 OC 不支持函数重载，OC 的替代方式是 withXXX… 2. 重写： 也叫覆盖，指在子类中定义一个与父类中方法同名同参数列表的方法。 重写是子类的方法覆盖父类的方法，要求方法名和参数都相同 因为子类会继承父类的方法，而重写就是将从父类继承过来的方法重新定义一次，重新填写方法中的代码。 重写必须继承，重载不用 假设有一个Person类,用于 name 和 age 两个属性,我们分别用重写和重载方法为其添加属性 创建Person类12345678910111213class Person: NSObject &#123; var name: String // 姓名 var age: Int // 年龄 // 构造函数 init(name: String,age: Int) &#123; self.name = name self.age = age // 必须在 super.init() 之前 初始化对象 super.init() &#125;&#125; 通过重写方法为其添加 “lesson” 属性1234567891011121314151617class Student: Person &#123; var lesson: String /// 重写 /// /// - Parameters: /// - name: 姓名 /// - age: 年龄 override init(name: String, age: Int) &#123; lesson = "Python" // 必须放在super.init()之前 super.init(name: name, age: age) &#125;&#125; 123/// 重写实例化的对象let s = Student(name: "Joyce", age: 18)print(s.lesson) // Python 通过重载方法为其添加 “lesson” 属性123456789101112131415161718class Student: Person &#123; var lesson: String /// 重载 /// /// - Parameters: /// - name: 姓名 /// - age: 年龄 /// - lesson: 课程 init(name: String, age: Int, lesson:String) &#123; self.lesson = lesson super.init(name: name, age: age) &#125;&#125; 123/// 重载实例化的对象let s1 = Student(name: "Yang", age: 24, lesson: "iOS")print(s1.lesson) // iOS 总结: 通过重载,可以快速为方法添加新的属性,属性可以通过外部传入 重写,只能在方法内部设置属性,外部无法直观看到类的参数列表]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swift-类和结构体(class&struct)]]></title>
    <url>%2F2017%2F10%2F02%2Fswift-class%26struct.html</url>
    <content type="text"><![CDATA[较传统的OC语言，swift使用了更多的结构体,在 swift 中，所有的基本类型,都是结构体类型 整数（Integer） 浮点数（floating-point） 布尔值（Boolean） 字符串（string) 数组（array) 字典（dictionary） 在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：引用类型 引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝 值类型 它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制 类和结构体对比本质区别： 类是引用类型，实例是通过引用传递 结构体是值类型，实例是通过值传递 swift 中类和结构体有很多共同点 定义属性用于存储值 定义方法用于提供功能 定义下标操作使得可以通过下标语法来访问实例所包含的值 定义构造器用于生成初始化值 通过扩展以增加默认实现的功能 实现协议以提供某种标准功能 与结构体相比，类还有如下的附加功能 继承允许一个类继承另一个类的特征 类型转换允许在运行时检查和解释一个类实例的类型 析构器允许一个类实例释放任何其所被分配的资源 引用计数允许对一个类的多次引用 结构体和类的定义语法结构体定义语法123struct SomeStructure &#123; // 在这里定义结构体&#125; 所有结构体都有一个自动生成的成员逐一构造器，用于初始化新结构体实例中成员的属性 类定义语法 （一） 不继承NSObject的类，叫做基类 123class SomeClass &#123; // 在这里定义类&#125; 类定义语法 （二） 这种类继承自NSObject,可以使用OC中的 NSObject 的特性 eg:KVO,runtime 123class SomeClass: NSObject &#123; // 在这里定义类&#125; 类和结构体使用注意类是引用类型，其属性如果是可变类型，可以直接修改，修改后类型不变结构体是值类型，初始化完成后，一般情况下，不允许修改其属性；如果修改其属性，会生成一个新的结构体；如果想不改变结构体的类型，需要定义一个mutating修饰的方法，专门用来修改其属性 写时复制 (copy-on-write)swift用了大量的结构体，每次修改都是复制一份，是不是很浪费内存？ 答：在 swift 标准库中，像是 Array，Dictionary 和 Set 这样的集合类型是通过一种叫做写时复制 (copy-on-write) 的技术实现的，该技术优化了这一问题，让结构体在核合适的时候才进行复制。 类和结构体的选择当符合一条或多条以下条件时，请考虑构建结构体： 该数据结构的主要目的是用来封装少量相关简单数据值； 有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用； 该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用； 该数据结构不需要去继承另一个既有类型的属性或者行为。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-切片使用详解]]></title>
    <url>%2F2017%2F05%2F20%2FPython%2Fbasics%2FPython-%E5%88%87%E7%89%87%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html</url>
    <content type="text"><![CDATA[切片含义 切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。 切片使用 切片的语法: [起始:结束:步长] 123name = 'abcdef'print(name[0:3]) # 取 下标0~2 的字符 1. 截取所有字符串123456789name = 'abcdef'name[:] ``` #### 2. 截取最后一个字符串 ```Pythonname = 'abcdef'name[-1] 3. 反转字符串：12name = 'abcdef'name[-1:0:-1] tips步进数值意味着切片的方向及长度 - 1 倒着切片 + 1 默认，正常切片 注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)。*]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-string使用]]></title>
    <url>%2F2017%2F05%2F14%2Fpythonstring.html</url>
    <content type="text"><![CDATA[string 常见操作&#39;mystr = &#39;hello nilhy , This is Python demo&#39; find检测 str 是否包含在 mystr 中，如果是返回开始的索引值，否则返回 -1 12# 记住,返回的是所在位置索引值,没找到就返回-1mystr.find(str, start=0, end=len(mystr)) index跟find()方法一样，只不过如果str不在 mystr中会报一个异常. 12# 如果没有找到,会抛出异常'substring not found'mystr.index(str, start=0, end=len(mystr)) count返回 str在start和end之间 在 mystr里面出现的次数 1mystr.count(str, start=0, end=len(mystr)) replace把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次. 12# 记住这里替换之后会返回一个新的字符串mystr.replace(str1, str2, mystr.count(str1)) split以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串 12# 按照空格字符串拆分,参数2为最大拆分数mystr.split(str=" ", 2) capitalize把字符串的第一个字符大写 1mystr.capitalize() title把字符串的每个单词首字母大写 123&gt;&gt;&gt; a = "hello jianshu"&gt;&gt;&gt; a.title()&gt;&gt;&gt; 'Hello Jianshu' startswith检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False 1mystr.startswith(obj) endswith检查字符串是否以obj结束，如果是返回True,否则返回 False. 1mystr.endswith(obj) lower转换 mystr 中所有大写字符为小写 1mystr.lower() upper转换 mystr 中的小写字母为大写 1mystr.upper() ljust返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 1mystr.ljust(width) rjust返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 1mystr.rjust(width) center返回一个原字符串居中,并使用空格填充至长度 width 的新字符串 1mystr.center(width) lstrip删除 mystr 左边的空白字符 1mystr.lstrip() rstrip删除 mystr 字符串末尾的空白字符 1mystr.rstrip() strip删除mystr字符串两端的空白字符 1234# 只是去除两端字符串,如果 'jian shu', 中间存在空格,则不去除中间的&gt;&gt;&gt; a = "\n\t jianshu \t\n"&gt;&gt;&gt; a.strip()&gt;&gt;&gt; 'jianshu' rfind类似于 find()函数，不过是从右边开始查找. 1mystr.rfind(str, start=0,end=len(mystr) ) rindex类似于 index()，不过是从右边开始. 1mystr.rindex( str, start=0,end=len(mystr)) partition(分区, 分成3段)把mystr以str分割成三部分,str前，str 12# 返回一个元祖, 参数是按照那个字符串去拆分mystr.partition(str) rpartition类似于 partition()函数,不过是从右边开始. 12# 从右到左,分三段mystr.rpartition(str) splitlines按照行分隔，返回一个包含各行作为元素的列表 12# 分割的字符串,按照\n 分割mystr.splitlines() isalpha如果 mystr 所有字符都是字母 则返回 True,否则返回 False 12# 必须为存字符, 空格都属于其他字符,mystr.isalpha() isdigit如果 mystr 只包含数字则返回 True 否则返回 False. 12# 必须为纯数字, 空格都属于其他字符,mystr.isdigit() isalnum如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False 1mystr.isalnum() isspace如果 mystr 中只能包含空格，则返回 True，否则返回 False. 1mystr.isspace() joinmystr 中每个字符后面插入str,构造出一个新的字符串 123456# 用法 : mystr.join(str)&gt;&gt;&gt; strs = ['my','name','is', 'hai']&gt;&gt;&gt; strSpace = ' '&gt;&gt;&gt; strSpace.join(strs)# 以下是输出结果&gt;&gt;&gt; 'my name is hai' 问题:给定一个字符串aStr，返回使用空格或者’\t’分割后的倒数第二个子串 12345678testStr = 'haha nihao a \t heihei \t woshi nide \t hao \nnnn' # 即可以去除以上字符串中的所有转义和空格符号 # 1. 去除\t \n 空格strList = testStr.strip()# 2. 得到新的字符串,拼接起来newStr = ''.join(strList)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C-不定参详解]]></title>
    <url>%2F2017%2F02%2F11%2FiOS%2FObjective-C%2FObjective-C-%E4%B8%8D%E5%AE%9A%E5%8F%82%E8%AF%A6%E8%A7%A3.html</url>
    <content type="text"><![CDATA[简单介绍一下这个,下面会有详细的用法和解释、 大致含义 : 一个可变参数函数是指一个函数拥有不定的参数，即为一个函数可接收多个参数。有时会遇到一些算术问题需要用到，比如是计算传入参数的总和，字符串的连接或是其它操作过程，在 Objective-C 里也经常使用，最经典的就是 NSLog（ C 为 printf ） ，它可以指定格式的输出，格式化输出的内容. 当然,不定参数,你也可以使用数组代替。废话不多说,直接上代码开干了….12345678910111213141516- (void)print:(NSString *)firstArg, ... NS_REQUIRES_NIL_TERMINATION &#123; if(firstArg) &#123; // 1.定义一个指向个数可变的参数列表指针 va_list args; // 2.用于存放取出的参数 NSString *arg; // 3.初始化变量刚定义的va_list变量，这个宏的第二个参数是第一个可变参数的前一个参数，是一个固定的参数 va_start(args, firstArg); // 4.遍历全部参数 va_arg返回可变的参数(a_arg的第二个参数是你要返回的参数的类型) while ((arg = va_arg(args, NSString *))) &#123; NSLog(@"%@", arg); &#125; // 清空参数列表，并置参数指针args无效 va_end(args); &#125;&#125; 下面就是来解释各个方法和参数的含义 va_list : 用来保存宏 va_start 、va_arg 和 va_end所需信息的一种类型。为了访问变长参数列表中的参数，必须声明 va_list 类型的一个对象 va_start : 访问变长参数列表中的参数之前使用的宏，它初始化用va_list声明的对象，初始化结果供宏va_arg和va_end使用 va_arg : 展开成一个表达式的宏，该表达式具有变长参数列表中下一个参数的值和类型。每次调用 va_arg 都会修改，用 va_list 声明的对象从而使该对象指向参数列表中的下一个参数 va_end : 该宏使程序能够从变长参数列表用宏 va_start 引用的函数中正常返回 NS_REQUIRES_NIL_TERMINATION : 是一个宏，用于编译时非nil结尾的检查 使用注意 在可变参数里，所有参数均用逗号隔开 参数结尾必须加上nil，表示参数结束]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C-事件处理与如何获得最佳点击的View]]></title>
    <url>%2F2016%2F11%2F14%2FiOS%2FObjective-C%2FObjective-C-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E6%9C%80%E4%BD%B3%E7%82%B9%E5%87%BB%E7%9A%84View.html</url>
    <content type="text"><![CDATA[事件的产生与传递事件是如何产生与传递的? 当发生触摸事件的后,系统会将该事件加入到一个由UIApplication管理的时间队列中,UIApplication会从事件队列中取出最前面的事件,并将这个事件分发下去,以便处理,主窗口即Window 会在视图层次中找到一个合适的视图来处理触摸事件 触摸事件的传递是从父控件传递给子控件的,如果父控件不能接受事件,则里面的所有子控件也不能接收事件 当一个控件不能接受事件时,一般有几种情况 不接收用户交互:userInteractionEnabled = NO 当一个控件隐藏时:Hidden = YES 当一个控件为透明时 事件的响应 用户点击屏幕产生的一个触摸事件,经过一系列的传递过程后,会找到一个最适合的视图来处理事件.找到最合适的视图控件后,就会调用控件的touches方法来作具体的事件处理.touches的默认做法是将事件顺着响应者链条向上传递,将事件交给上一个响应者处理 什么是响应者链条? 由多个响应者对象连接起来的链条 什么是响应者对象? 继承了UIResponder的对象 如何去寻找上一个响应者 1.如果当前的View是控制器的View,那么控制器就是上一个响应者 2.如果当前的View不是控制器的View,那么他的父控件就是上一个响应者 3.在视图层次结构的最顶级视图,如果也不能处理收到的事件或消息,则其将事件或消息传递给window对象进行处理 4.如果window对象也不处理，则其将事件或消息传递给UIApplication对象 5.如果UIApplication也不能处理该事件或消息，则将其丢弃 系统是如何寻找最合适的View* 1.先判断自己是否能接收触摸事件 2.再判断触摸的当前点在不在自己身上 3.如果在自己身上,它会从后往前遍历子控件,遍历出每一个控件后,重启前两步 4.如果没有符合条件的子控件,那么自身就是最合适的View 在寻找最合适View的过程中,系统会调用2个方法123456789101112131415// 作用:寻找最适合的View// 什么时候调用:当事件传递给当前View时就会调用这个方法- (UIView *) hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123; UIView *fitView = [super hitTest:point withEvent:event]; NSLog(@"%@",fitView); return fitView;&#125;// 作用:判断触摸点在不在当前的View上.// 什么时候调用:在hitTest方法当中会自动调用这个方法.// 注意:point必须得要跟当前View同一个坐标系.- (BOOL) pointInside:(CGPoint)point withEvent:(UIEvent *)event &#123; return YES;&#125; 那么hitTest: withEvent:方法底层是如何实现的呢?12345678910111213141516171819202122// 判断自己能否接收事件if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) &#123; return nil;&#125;// 触摸点在不在自己身上if ([self pointInside:point withEvent:event] == NO) &#123; return nil;&#125;// 从后往前遍历自己的子控件(重复前面的两个步骤)int count = (int)self.subviews.count;for (int i = count -1; i &gt;= 0; i--) &#123; UIView *childV = self.subviews[i]; // point必须得要跟childV相同的坐标系. // 把point转换childV坐标系上面的点 CGPoint childP = [self convertPoint:point toView:childV]; UIView *fitView = [childV hitTest:childP withEvent:event]; if (fitView) &#123; return fitView; &#125; &#125;// 如果没有符合条件的子控件，那么就自己最适合处理return self; 在开发中或多或少会需要一些特殊的点击,这里有2个小例子供大家参考 一个按钮被一个半透明的View部分遮挡,需要点击到按钮的时候,按钮始终响应 一个View超出了父视图的范围,需要点击超出范围的View也有响应 123456789101112- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123; //当触摸点在按钮上的时候,才让按钮去响应事件. //把当前点转换成按钮坐标系上的点. CGPoint btnP = [self convertPoint:point toView:self.btn]; if ( [self.btn pointInside:btnP withEvent:event]) &#123; return self.btn; &#125;else&#123; return [super hitTest:point withEvent:event]; &#125;&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
</search>
