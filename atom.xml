<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nilhy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/5e6cf909d1f5d13202195966dda24edc</icon>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nilhy.cn/"/>
  <updated>2019-05-23T09:37:45.000Z</updated>
  <id>http://nilhy.cn/</id>
  
  <author>
    <name>nilhy</name>
    <email>coderhaiyang@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pod search 搜索类库失败的解决办法</title>
    <link href="http://nilhy.cn/2019/05/23/Mac/cocoapods/pod%20search%20%E6%90%9C%E7%B4%A2%E7%B1%BB%E5%BA%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>http://nilhy.cn/2019/05/23/Mac/cocoapods/pod search 搜索类库失败的解决办法.html</id>
    <published>2019-05-23T09:34:22.000Z</published>
    <updated>2019-05-23T09:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="pod-search-搜索类库失败的解决办法"><a href="#pod-search-搜索类库失败的解决办法" class="headerlink" title="pod search 搜索类库失败的解决办法"></a>pod search 搜索类库失败的解决办法</h4><p>执行<code>pod search</code>来搜索类库信息时，报错: <code>[!] Unable to find a pod with name, author, summary, or descriptionmatching &#39;······&#39;</code><br>成功安装CocoaPods，但不能pod search搜素类库的情况</p><h4 id="1-执行pod-setup"><a href="#1-执行pod-setup" class="headerlink" title="1. 执行pod setup"></a>1. 执行pod setup</h4><ul><li>其实在你安装<code>CocoaPods</code>执行<code>pod install</code>时，系统会默认操作<code>pod setup</code>，然而由于中国强大的墙可能会<code>pod setup</code>不成功。这时就需要手动执行<code>pod setup</code>指令，如下：</li><li>终端输入：pod setup<br>会出现<code>Setting up CocoaPods master repo</code>，稍等几十秒，最底下会输出<code>Setup completed。说明执行pod setup</code>成功。</li><li>如果<code>pod search</code>操作还是搜索失败，如下：<br>终端输入：<code>pod search AFNetworking</code></li><li>输出：<code>Unable to find a pod with name, author, summary, or descriptionmatching &#39;AFNetworking&#39;</code>这时就需要继续下面的步骤了。</li></ul><h4 id="2-删除-Library-Caches-CocoaPods目录下的search-index-json文件"><a href="#2-删除-Library-Caches-CocoaPods目录下的search-index-json文件" class="headerlink" title="2. 删除~/Library/Caches/CocoaPods目录下的search_index.json文件"></a>2. 删除~/Library/Caches/CocoaPods目录下的search_index.json文件</h4><ul><li><code>pod setup</code>成功后，依然不能<code>pod search</code>，是因为之前你执行<code>pod search</code>生成了<code>search_index.json</code>，此时需要删掉。<br>终端输入：<code>rm ~/Library/Caches/CocoaPods/search_index.json</code><br>删除成功后，再执行<code>pod search</code>。</li></ul><h4 id="3-执行pod-search"><a href="#3-执行pod-search" class="headerlink" title="3. 执行pod search"></a>3. 执行pod search</h4><ul><li>终端输入: <code>pod search afnetworking</code>(不区分大小写)</li><li>输出：<code>Creating search index for spec repo &#39;master&#39;.. Done!</code>，稍等片刻······就会出现所有带有<code>afnetworking</code>字段的类库。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;pod-search-搜索类库失败的解决办法&quot;&gt;&lt;a href=&quot;#pod-search-搜索类库失败的解决办法&quot; class=&quot;headerlink&quot; title=&quot;pod search 搜索类库失败的解决办法&quot;&gt;&lt;/a&gt;pod search 搜索类库失败的解决
      
    
    </summary>
    
      <category term="Cocoapods" scheme="http://nilhy.cn/categories/Cocoapods/"/>
    
    
      <category term="Cocoapods" scheme="http://nilhy.cn/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Swift 粒子动画CAEmitterLayer简单使用</title>
    <link href="http://nilhy.cn/2019/04/22/iOS/CoreAnimation/CAEmitter%E4%BD%BF%E7%94%A8.html"/>
    <id>http://nilhy.cn/2019/04/22/iOS/CoreAnimation/CAEmitter使用.html</id>
    <published>2019-04-22T08:01:37.000Z</published>
    <updated>2019-04-22T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="粒子系统介绍"><a href="#粒子系统介绍" class="headerlink" title="粒子系统介绍"></a>粒子系统介绍</h3><ul><li><p>什么是粒子系统？</p><ul><li>粒子系统是由总体具有相同的表现规律，个体却随机表现出不同的特征的大量显示元素构成的集合。</li></ul></li><li><p>粒子定义有三要素</p><ul><li>群体性：粒子系统是由“大量显示元素”构成的(例如雪、雨、一团雾等等)</li><li>统一性：粒子系统的每个元素具有相同的表现规律(例如下雨、下雪，方向都是从上向下)</li><li>随机性：粒子系统的每个元素又随机表现出不同特征(例如下雪，每个雪花下落的速度会有不同，大小会有不同、方向也会有略微的不同)</li></ul></li></ul><a id="more"></a><h3 id="粒子系统应用场景"><a href="#粒子系统应用场景" class="headerlink" title="粒子系统应用场景"></a>粒子系统应用场景</h3><ul><li>影视行业<ul><li>目前我们经常看的大片，比如沙尘暴、暴风雨、暴雪、烟花 等等，很多都是粒子特效做出来的。很逼真，而且相比真实世界中去实拍，成本要低很多</li></ul></li><li>游戏中<ul><li>爆炸、雨、雪、雾、烟花等等。都是粒子系统实现</li></ul></li><li>应用中<ul><li>主播房间右下角粒子动画</li><li>雪花/下雨/烟花等效果</li><li>QQ生日快乐一堆表情的跳动</li></ul></li></ul><h3 id="粒子系统的使用"><a href="#粒子系统的使用" class="headerlink" title="粒子系统的使用"></a>粒子系统的使用</h3><ul><li>步骤<ul><li>创建发射器</li><li>创建粒子, 设置粒子属性</li></ul></li></ul><ul><li>代码</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Emitterable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Emitterable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startEmittering</span><span class="params">(<span class="number">_</span> point : CGPoint)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建发射器</span></span><br><span class="line">        <span class="keyword">let</span> emitter = <span class="type">CAEmitterLayer</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.设置发射器的位置</span></span><br><span class="line">        emitter.emitterPosition = point</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.开启三维效果</span></span><br><span class="line">        emitter.preservesDepth = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.创建粒子, 并且设置例子相关的属性</span></span><br><span class="line">        <span class="keyword">let</span> cell = <span class="type">CAEmitterCell</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.2.设置粒子速度</span></span><br><span class="line">        cell.velocity = <span class="number">150</span></span><br><span class="line">        cell.velocityRange = <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.3.设置例子的大小</span></span><br><span class="line">        cell.scale = <span class="number">0.7</span></span><br><span class="line">        cell.scaleRange = <span class="number">0.3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.4.设置粒子方向</span></span><br><span class="line">        </span><br><span class="line">        cell.emissionLongitude = <span class="type">CGFloat</span>.pi / <span class="number">2</span></span><br><span class="line">        cell.emissionRange = <span class="type">CGFloat</span>.pi / <span class="number">6</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.5.设置例子的存活时间</span></span><br><span class="line">        cell.lifetime = <span class="number">3</span></span><br><span class="line">        cell.lifetimeRange = <span class="number">1.5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.6.设置粒子旋转</span></span><br><span class="line">        cell.spin = <span class="type">CGFloat</span>.pi / <span class="number">2</span></span><br><span class="line">        cell.spinRange = <span class="type">CGFloat</span>.pi / <span class="number">4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.6.设置例子每秒弹出的个数</span></span><br><span class="line">        cell.birthRate = <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.7.设置粒子展示的图片</span></span><br><span class="line">        cell.contents = <span class="type">UIImage</span>(named: <span class="string">"imageName"</span>)?.cgImage</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.将粒子设置到发射器中</span></span><br><span class="line">        emitter.emitterCells = [cell]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6.将发射器的layer添加到父layer中</span></span><br><span class="line">        view.layer.addSublayer(emitter)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 移除CAEmitterLayer</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopEmittering</span><span class="params">()</span></span> &#123;</span><br><span class="line">       </span><br><span class="line">        view.layer.sublayers?.<span class="built_in">filter</span>(&#123; $<span class="number">0</span>.isKind(of: <span class="type">CAEmitterLayer</span>.<span class="keyword">self</span>)&#125;).first?.removeFromSuperlayer()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;粒子系统介绍&quot;&gt;&lt;a href=&quot;#粒子系统介绍&quot; class=&quot;headerlink&quot; title=&quot;粒子系统介绍&quot;&gt;&lt;/a&gt;粒子系统介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是粒子系统？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粒子系统是由总体具有相同的表现规律，个体却随机表现出不同的特征的大量显示元素构成的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;粒子定义有三要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;群体性：粒子系统是由“大量显示元素”构成的(例如雪、雨、一团雾等等)&lt;/li&gt;
&lt;li&gt;统一性：粒子系统的每个元素具有相同的表现规律(例如下雨、下雪，方向都是从上向下)&lt;/li&gt;
&lt;li&gt;随机性：粒子系统的每个元素又随机表现出不同特征(例如下雪，每个雪花下落的速度会有不同，大小会有不同、方向也会有略微的不同)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="粒子动画" scheme="http://nilhy.cn/tags/%E7%B2%92%E5%AD%90%E5%8A%A8%E7%94%BB/"/>
    
      <category term="CAEmitterLayer" scheme="http://nilhy.cn/tags/CAEmitterLayer/"/>
    
  </entry>
  
  <entry>
    <title>iOS全屏手势POP</title>
    <link href="http://nilhy.cn/2019/04/21/fullScreenPop.html"/>
    <id>http://nilhy.cn/2019/04/21/fullScreenPop.html</id>
    <published>2019-04-21T12:58:46.000Z</published>
    <updated>2019-04-21T13:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>在iOS中,默认如果有导航控制器,当push到下一个控制器时,当前界面时可以局部侧滑返回的,这一段范围很少.</p><p>既然系统已经给我们了实现好了,侧滑返回,那么我们如何解决,全屏手势侧滑返回呢?</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="拿到系统的返回手势-操作一波"><a href="#拿到系统的返回手势-操作一波" class="headerlink" title="拿到系统的返回手势,操作一波"></a>拿到系统的返回手势,操作一波</h3><h4 id="runtime-打印导航控制器所有私有属性"><a href="#runtime-打印导航控制器所有私有属性" class="headerlink" title="runtime 打印导航控制器所有私有属性"></a>runtime 打印导航控制器所有私有属性</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 通过runtime获取对应的手势属性</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">count</span> : <span class="type">UInt32</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">UIGestureRecognizer</span>.<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)!</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ivar = ivars[<span class="type">Int</span>(i)]</span><br><span class="line">    <span class="keyword">let</span> namep = ivar_getName(ivar)</span><br><span class="line">    <span class="keyword">let</span> name = <span class="type">String</span>(cString: namep!)<span class="comment">//属性名称</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>打印结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_gestureFlags</span><br><span class="line">_targets // 这个保存手势的所有target</span><br><span class="line">_delayedTouches</span><br><span class="line">_delayedPresses</span><br><span class="line">_view</span><br><span class="line">_lastTouchTimestamp</span><br><span class="line">_firstEventTimestamp</span><br><span class="line">_state</span><br><span class="line">_allowedTouchTypes</span><br><span class="line">_initialTouchType</span><br><span class="line">_internalActiveTouches</span><br><span class="line">_forceClassifier</span><br><span class="line">_requiredPreviewForceState</span><br><span class="line">_touchForceObservable</span><br><span class="line">_touchForceObservableAndClassifierObservation</span><br><span class="line">_forceTargets</span><br><span class="line">_forcePressCount</span><br><span class="line">_beganObservable</span><br><span class="line">_failureRequirements</span><br><span class="line">_failureDependents</span><br><span class="line">_activeEvents</span><br><span class="line">_keepTouchesOnContinuation</span><br><span class="line">_delegate</span><br><span class="line">_allowedPressTypes</span><br><span class="line">_name</span><br><span class="line">_gestureEnvironment</span><br></pre></td></tr></table></figure><h4 id="获取target"><a href="#获取target" class="headerlink" title="获取target"></a>获取target</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> anyObject = interactivePopGestureRecognizer!.value(forKey:  <span class="string">"_targets"</span>) <span class="keyword">as</span>? [<span class="type">AnyObject</span>] <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object =  anyObject.first</span><br><span class="line"><span class="built_in">print</span>(object)</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 原来是一个数组,数组中是一个tuple, tuple第一个是一个action,第二个既然是target对象</span></span><br><span class="line">[(action=handleNavigationTransition:, target=&lt;_UINavigationInteractiveTransition <span class="number">0x7fc664e4f850</span>&gt;)]</span><br></pre></td></tr></table></figure><h4 id="KVC-取出target"><a href="#KVC-取出target" class="headerlink" title="KVC 取出target"></a>KVC 取出target</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = object.value(forKeyPath: <span class="string">"target"</span>)</span><br><span class="line"><span class="keyword">let</span> action = <span class="type">Selector</span>((<span class="string">"handleNavigationTransition:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是获取不到action的会奔溃</span></span><br><span class="line"><span class="comment">//let action = object.value(forKeyPath: "action") as? Selector</span></span><br></pre></td></tr></table></figure><h4 id="替换手势"><a href="#替换手势" class="headerlink" title="替换手势"></a>替换手势</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//创建自己的手势 将系统的手势去代替自己创建的手势</span><br><span class="line">let panGes = UIPanGestureRecognizer(target: target, action: action)</span><br><span class="line">view.addGestureRecognizer(panGes)</span><br></pre></td></tr></table></figure><h3 id="使用FDFullscreenPopGesture"><a href="#使用FDFullscreenPopGesture" class="headerlink" title="使用FDFullscreenPopGesture"></a>使用FDFullscreenPopGesture</h3><p>这玩意就补多少了,添加进去,啥都不用干,懒人方案,完美解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;在iOS中,默认如果有导航控制器,当push到下一个控制器时,当前界面时可以局部侧滑返回的,这一段范围很少.&lt;/p&gt;
&lt;p&gt;既然系统已经给我们了实现好了,侧滑返回,那么我们如何解决,全屏手势侧滑返回呢?&lt;/p&gt;
&lt;h2 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h2&gt;&lt;h3 id=&quot;拿到系统的返回手势-操作一波&quot;&gt;&lt;a href=&quot;#拿到系统的返回手势-操作一波&quot; class=&quot;headerlink&quot; title=&quot;拿到系统的返回手势,操作一波&quot;&gt;&lt;/a&gt;拿到系统的返回手势,操作一波&lt;/h3&gt;&lt;h4 id=&quot;runtime-打印导航控制器所有私有属性&quot;&gt;&lt;a href=&quot;#runtime-打印导航控制器所有私有属性&quot; class=&quot;headerlink&quot; title=&quot;runtime 打印导航控制器所有私有属性&quot;&gt;&lt;/a&gt;runtime 打印导航控制器所有私有属性&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 通过runtime获取对应的手势属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;UInt32&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ivars = class_copyIvarList(&lt;span class=&quot;type&quot;&gt;UIGestureRecognizer&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &amp;amp;&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..&amp;lt;&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ivar = ivars[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(i)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; namep = ivar_getName(ivar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; name = &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(cString: namep!)&lt;span class=&quot;comment&quot;&gt;//属性名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="Pop" scheme="http://nilhy.cn/tags/Pop/"/>
    
      <category term="runtime" scheme="http://nilhy.cn/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>mac 上配置 aria2 加快下载速度的方法</title>
    <link href="http://nilhy.cn/2019/04/18/aria2_config.html"/>
    <id>http://nilhy.cn/2019/04/18/aria2_config.html</id>
    <published>2019-04-18T13:21:21.000Z</published>
    <updated>2019-04-22T08:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为<code>mac</code> 用户,受够了各种下载限速，浏览器自带的下载器极为蛋疼，不如花点时间来配置 <code>aria2</code>，结合 <code>Chrome</code> 插件配置之后,真香!</p></blockquote><h2 id="aria2-是什么？"><a href="#aria2-是什么？" class="headerlink" title="aria2 是什么？"></a>aria2 是什么？</h2><p><code>aria2</code> 是一款支持多种协议的轻量级命令行下载工具。有以下特性：</p><ul><li>多线程连线：<code>aria2</code> 会自动从多个线程下载文件，并充分利用你的带宽。</li><li>轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 <code>4MB~9MB</code> ，使用 <code>BitTorrent</code> 协议，下行速度 <code>2.8MB/s</code> 时 <code>CPU</code> 占用率约 <code>6%</code> 。</li><li>全功能 <code>BitTorrent</code> 客户端。</li><li>支持 <code>RPC</code> 界面远程控制。</li></ul><a id="more"></a><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p>由于是使用 <code>Homebrew</code> 方式安装，所以需要先安装 <code>Homebrew</code> ，已经装过了可以跳过这一步，终端输入以下命令安装。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><h2 id="安装-aria2"><a href="#安装-aria2" class="headerlink" title="安装 aria2"></a>安装 aria2</h2><p>在终端输入以下命令安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install aria2</span><br></pre></td></tr></table></figure></p><h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><p><code>aria2</code> 提供两种方式使用，一种是直接命令行模式下载，不推荐使用这种方法，推荐使用另外一种 <code>RPC</code> 模式，这种方式 <code>aria2</code> 启动之后只会安静的等待下载请求，下载完成后也只会安静的驻留后台不会自动退出。而使用 <code>RPC</code> 模式推荐做一个配置文件方便使用。</p><p>我们把配置文件放在 <code>~/.aria2</code> 下，终端依次输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .aria2</span><br><span class="line">cd .aria2</span><br><span class="line">touch aria2.conf</span><br></pre></td></tr></table></figure><p>接着打开 <code>Finder</code>，利用 <code>shift + command + G</code> 进入路径：<code>~/.aria2/aria2.conf</code>，用文本编辑器打开 <code>aria2.conf</code>，将 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmljZWhvbmV5Lm1lL2Fib3V0" title="https://blog.icehoney.me/about">雪月秋水君<i class="fa fa-external-link"></i></span> 提供的以下配置直接拷贝进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#用户名</span><br><span class="line">#rpc-user=user</span><br><span class="line">#密码</span><br><span class="line">#rpc-passwd=passwd</span><br><span class="line">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class="line">#设置加密的密钥</span><br><span class="line">#rpc-secret=token</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许外部访问，false的话只监听本地端口</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line">dir=/Users/xxx/Downloads</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class="line">#enable-mmap=true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation=prealloc</span><br></pre></td></tr></table></figure><p>默认下载路径的 <code>/Users/xxx/Downloads</code> 可以改为任何你想要的绝对路径。此处写为 <code>Downloads</code> 目录，<code>xxx</code> 请自行替换成你的 <code>mac</code> 用户名，然后保存，退出编辑器。</p><h2 id="启动-RPC-模式"><a href="#启动-RPC-模式" class="headerlink" title="启动 RPC 模式"></a>启动 RPC 模式</h2><p>在终端输入以下命令启动 <code>RPC</code> 模式，将 <code>xxx</code> 替换成你的 <code>mac</code> 用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c --conf-path=&quot;/Users/xxx/.aria2/aria2.conf&quot; -D</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>下载 <code>chrome</code> 浏览器下载插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phZS1qYWUvQ2FtdGQ=" title="https://github.com/jae-jae/Camtd">Camtd - Aria2下载管理器<i class="fa fa-external-link"></i></span>, 下载完成后右键下载链接点击 <code>Send to Aria2</code> 即可下载，也支持拦截下载。</p><p><img src="https://blog-resources-1256752477.cos.ap-guangzhou.myqcloud.com/images/20190418211540.jpg" alt><br><img src="https://blog-resources-1256752477.cos.ap-guangzhou.myqcloud.com/images/20190418211538.png" alt></p><p>这个插件不满意的话，也可以搜索其他类似插件，但必须启动 <code>RPC</code> 模式才能够使用此类插件。</p><blockquote><p>文章参考 <span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC8zMjE2Nw==" title="https://sspai.com/post/32167">Mac 上使用百度网盘很烦躁？花点时间配置 aria2 吧<i class="fa fa-external-link"></i></span> 。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为&lt;code&gt;mac&lt;/code&gt; 用户,受够了各种下载限速，浏览器自带的下载器极为蛋疼，不如花点时间来配置 &lt;code&gt;aria2&lt;/code&gt;，结合 &lt;code&gt;Chrome&lt;/code&gt; 插件配置之后,真香!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;aria2-是什么？&quot;&gt;&lt;a href=&quot;#aria2-是什么？&quot; class=&quot;headerlink&quot; title=&quot;aria2 是什么？&quot;&gt;&lt;/a&gt;aria2 是什么？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;aria2&lt;/code&gt; 是一款支持多种协议的轻量级命令行下载工具。有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程连线：&lt;code&gt;aria2&lt;/code&gt; 会自动从多个线程下载文件，并充分利用你的带宽。&lt;/li&gt;
&lt;li&gt;轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 &lt;code&gt;4MB~9MB&lt;/code&gt; ，使用 &lt;code&gt;BitTorrent&lt;/code&gt; 协议，下行速度 &lt;code&gt;2.8MB/s&lt;/code&gt; 时 &lt;code&gt;CPU&lt;/code&gt; 占用率约 &lt;code&gt;6%&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;全功能 &lt;code&gt;BitTorrent&lt;/code&gt; 客户端。&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;RPC&lt;/code&gt; 界面远程控制。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://nilhy.cn/categories/Mac/"/>
    
    
      <category term="aria2" scheme="http://nilhy.cn/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>iOS跳转到AppStore常用方法</title>
    <link href="http://nilhy.cn/2018/03/19/Jump2AppStoreMethod.html"/>
    <id>http://nilhy.cn/2018/03/19/Jump2AppStoreMethod.html</id>
    <published>2018-03-19T05:33:49.000Z</published>
    <updated>2019-04-21T05:39:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跳转到 AppStore 的常用方法，以下网址中将 id 后面的数字改为自己 App 的 id 即可。</p></blockquote><h4 id="1-通过Safari-输入网址跳转到-AppStore"><a href="#1-通过Safari-输入网址跳转到-AppStore" class="headerlink" title="1.通过Safari 输入网址跳转到 AppStore"></a>1.通过<code>Safari</code> 输入网址跳转到 AppStore</h4><ul><li><code>http://itunes.apple.com/us/app/id1234567890</code></li></ul><h4 id="2-App-内部通过代码直接跳转到-AppStore"><a href="#2-App-内部通过代码直接跳转到-AppStore" class="headerlink" title="2.App 内部通过代码直接跳转到 AppStore"></a>2.App 内部通过代码直接跳转到 AppStore</h4><ul><li><code>itms-apps://itunes.apple.com/cn/app/jie-zou-da-shi/id1234567890?mt=8</code></li></ul><h4 id="3-App-内部通过代码跳转到-AppStore-的评论区"><a href="#3-App-内部通过代码跳转到-AppStore-的评论区" class="headerlink" title="3.App 内部通过代码跳转到 AppStore 的评论区"></a>3.App 内部通过代码跳转到 AppStore 的评论区</h4><ul><li><code>itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;id=1234567890</code></li></ul><a id="more"></a><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// appid替换成自己的appid        </span></span><br><span class="line"><span class="keyword">let</span> appid : <span class="type">String</span> = <span class="string">"1234567890"</span></span><br><span class="line"><span class="comment">/// URL替换成上面所提供的URL</span></span><br><span class="line"><span class="keyword">let</span> urlStirng = <span class="string">"itms-apps://itunes.apple.com/cn/app/jie-zou-da-shi/id\(appid)?mt=8"</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">10</span>, *) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: urlStirng) , <span class="type">UIApplication</span>.shared.canOpenURL(url) &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.<span class="keyword">open</span>(url, options: [:], completionHandler: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: urlStirng) , <span class="type">UIApplication</span>.shared.canOpenURL(url) &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.openURL(url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跳转到 AppStore 的常用方法，以下网址中将 id 后面的数字改为自己 App 的 id 即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-通过Safari-输入网址跳转到-AppStore&quot;&gt;&lt;a href=&quot;#1-通过Safari-输入网址跳转到-AppStore&quot; class=&quot;headerlink&quot; title=&quot;1.通过Safari 输入网址跳转到 AppStore&quot;&gt;&lt;/a&gt;1.通过&lt;code&gt;Safari&lt;/code&gt; 输入网址跳转到 AppStore&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://itunes.apple.com/us/app/id1234567890&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-App-内部通过代码直接跳转到-AppStore&quot;&gt;&lt;a href=&quot;#2-App-内部通过代码直接跳转到-AppStore&quot; class=&quot;headerlink&quot; title=&quot;2.App 内部通过代码直接跳转到 AppStore&quot;&gt;&lt;/a&gt;2.App 内部通过代码直接跳转到 AppStore&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;itms-apps://itunes.apple.com/cn/app/jie-zou-da-shi/id1234567890?mt=8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-App-内部通过代码跳转到-AppStore-的评论区&quot;&gt;&lt;a href=&quot;#3-App-内部通过代码跳转到-AppStore-的评论区&quot; class=&quot;headerlink&quot; title=&quot;3.App 内部通过代码跳转到 AppStore 的评论区&quot;&gt;&lt;/a&gt;3.App 内部通过代码跳转到 AppStore 的评论区&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;amp;id=1234567890&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="AppStore" scheme="http://nilhy.cn/tags/AppStore/"/>
    
  </entry>
  
  <entry>
    <title>利用 iTunes 接口检查App版本更新</title>
    <link href="http://nilhy.cn/2018/01/16/iOS/AppStore/%E5%88%A9%E7%94%A8iTunes%E6%8E%A5%E5%8F%A3%E6%A3%80%E6%9F%A5App%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0.html"/>
    <id>http://nilhy.cn/2018/01/16/iOS/AppStore/利用iTunes接口检查App版本更新.html</id>
    <published>2018-01-16T08:55:01.000Z</published>
    <updated>2019-04-20T14:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iOS 想要检查 App 当前版本是否为最新，一般的方案大概都是服务器自己提供一个接口来获取 App 最新版本是多少，然后再做出相应提示是否需要更新，但是接口需要手动维护，应用要审核，还得等审核通过以后才能更新版本号，其实苹果提供了一个 iTunes 接口，能够查到 App 在 AppStore 上的状态信息，既省事又准确，下面记录一下具体实现方法。</p></blockquote><hr><h4 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h4><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><p><span class="exturl" data-url="aHR0cDovL3d3dy5hcHBsZS5jb20vaXR1bmVzL2FmZmlsaWF0ZXMvcmVzb3VyY2VzL2RvY3VtZW50YXRpb24vaXR1bmVzLXN0b3JlLXdlYi1zZXJ2aWNlLXNlYXJjaC1hcGkuaHRtbA==" title="http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html">iTunes 接口地址<i class="fa fa-external-link"></i></span> </p><p>有兴趣可以看一下，我们要用到的接口如下，xxx 处换成自己 App 的 AppId ，AppId 可以在 iTunes Connect 里面看到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://itunes.apple.com/lookup?id=xxx</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="Response-JSON"><a href="#Response-JSON" class="headerlink" title="Response JSON"></a>Response JSON</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"resultCount"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"results"</span> : [&#123;</span><br><span class="line">        <span class="attr">"artistId"</span> : <span class="string">"开发者 ID"</span>,</span><br><span class="line">        <span class="attr">"artistName"</span> : <span class="string">"开发者名称"</span>,</span><br><span class="line">        <span class="attr">"trackCensoredName"</span> : <span class="string">"审查名称"</span>,</span><br><span class="line">        <span class="attr">"trackContentRating"</span> : <span class="string">"评级"</span>,</span><br><span class="line">        <span class="attr">"trackId"</span> : <span class="string">"应用程序 ID"</span>,</span><br><span class="line">        <span class="attr">"trackName"</span> : <span class="string">"应用程序名称"</span>,</span><br><span class="line">        <span class="attr">"trackViewUrl"</span> : <span class="string">"应用程序下载网址"</span>,</span><br><span class="line">        <span class="attr">"userRatingCount"</span> : <span class="string">"用户评论数量"</span>,</span><br><span class="line">        <span class="attr">"userRatingCountForCurrentVersion"</span> : <span class="string">"当前版本的用户评论数量"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"版本号"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p>下面是检查版本更新的具体实现方法，注意接口地址 xxx 处换成自己 App 的 AppId</p><ul><li>开始请求</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 检查版本更新</span></span><br><span class="line">- (<span class="keyword">void</span>)checkVersion &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *url = <span class="string">@"http://itunes.apple.com/lookup?id=xxx"</span>;</span><br><span class="line">    [[AFHTTPSessionManager manager] POST:url parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">        DLog(<span class="string">@"版本更新检查成功"</span>);</span><br><span class="line">        <span class="built_in">NSArray</span> *results = responseObject[<span class="string">@"results"</span>];</span><br><span class="line">        <span class="keyword">if</span> (results &amp;&amp; results.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *response = results.firstObject;</span><br><span class="line">            <span class="built_in">NSString</span> *currentVersion = [[<span class="built_in">NSBundle</span> mainBundle] objectForInfoDictionaryKey:<span class="string">@"CFBundleShortVersionString"</span>]; <span class="comment">// 软件的当前版本</span></span><br><span class="line">            <span class="built_in">NSString</span> *lastestVersion = response[<span class="string">@"version"</span>]; <span class="comment">// AppStore 上软件的最新版本</span></span><br><span class="line">            <span class="keyword">if</span> (currentVersion &amp;&amp; lastestVersion &amp;&amp; ![<span class="keyword">self</span> isLastestVersion:currentVersion compare:lastestVersion]) &#123;</span><br><span class="line">                <span class="comment">// 给出提示是否前往 AppStore 更新</span></span><br><span class="line">                <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"检测到有版本更新，是否前往 AppStore 更新版本。"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">                [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"前往"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *trackViewUrl = response[<span class="string">@"trackViewUrl"</span>]; <span class="comment">// AppStore 上软件的地址</span></span><br><span class="line">                    <span class="keyword">if</span> (trackViewUrl) &#123;</span><br><span class="line">                        <span class="built_in">NSURL</span> *appStoreURL = [<span class="built_in">NSURL</span> URLWithString:trackViewUrl];</span><br><span class="line">                        <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:appStoreURL]) &#123;</span><br><span class="line">                            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:appStoreURL];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]];</span><br><span class="line">                [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:<span class="literal">nil</span>]];</span><br><span class="line">                [<span class="keyword">self</span>.window.rootViewController presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        DLog(<span class="string">@"版本更新检查失败"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 判断是否最新版本号（大于或等于为最新）</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isLastestVersion:(<span class="built_in">NSString</span> *)currentVersion compare:(<span class="built_in">NSString</span> *)lastestVersion &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentVersion &amp;&amp; lastestVersion) &#123;</span><br><span class="line">        <span class="comment">// 拆分成数组</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span> *currentItems = [[currentVersion componentsSeparatedByString:<span class="string">@"."</span>] mutableCopy];</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *lastestItems = [[lastestVersion componentsSeparatedByString:<span class="string">@"."</span>] mutableCopy];</span><br><span class="line">        <span class="comment">// 如果数量不一样补0</span></span><br><span class="line">        <span class="built_in">NSInteger</span> currentCount = currentItems.count;</span><br><span class="line">        <span class="built_in">NSInteger</span> lastestCount = lastestItems.count;</span><br><span class="line">        <span class="keyword">if</span> (currentCount != lastestCount) &#123;</span><br><span class="line">            <span class="built_in">NSInteger</span> count = labs(currentCount - lastestCount); <span class="comment">// 取绝对值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentCount &gt; lastestCount) &#123;</span><br><span class="line">                    [lastestItems addObject:<span class="string">@"0"</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [currentItems addObject:<span class="string">@"0"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 依次比较</span></span><br><span class="line">        <span class="built_in">BOOL</span> isLastest = <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; currentItems.count; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *currentItem = currentItems[i];</span><br><span class="line">            <span class="built_in">NSString</span> *lastestItem = lastestItems[i];</span><br><span class="line">            <span class="keyword">if</span> (currentItem.integerValue != lastestItem.integerValue) &#123;</span><br><span class="line">                isLastest = currentItem.integerValue &gt; lastestItem.integerValue;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isLastest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS 想要检查 App 当前版本是否为最新，一般的方案大概都是服务器自己提供一个接口来获取 App 最新版本是多少，然后再做出相应提示是否需要更新，但是接口需要手动维护，应用要审核，还得等审核通过以后才能更新版本号，其实苹果提供了一个 iTunes 接口，能够查到 App 在 AppStore 上的状态信息，既省事又准确，下面记录一下具体实现方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;接口信息&quot;&gt;&lt;a href=&quot;#接口信息&quot; class=&quot;headerlink&quot; title=&quot;接口信息&quot;&gt;&lt;/a&gt;接口信息&lt;/h4&gt;&lt;h5 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h5&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL3d3dy5hcHBsZS5jb20vaXR1bmVzL2FmZmlsaWF0ZXMvcmVzb3VyY2VzL2RvY3VtZW50YXRpb24vaXR1bmVzLXN0b3JlLXdlYi1zZXJ2aWNlLXNlYXJjaC1hcGkuaHRtbA==&quot; title=&quot;http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html&quot;&gt;iTunes 接口地址&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;有兴趣可以看一下，我们要用到的接口如下，xxx 处换成自己 App 的 AppId ，AppId 可以在 iTunes Connect 里面看到。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://itunes.apple.com/lookup?id=xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="版本更新" scheme="http://nilhy.cn/tags/%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Swift-重写与重载的使用和比较</title>
    <link href="http://nilhy.cn/2017/10/03/iOS/Swift/Swift-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%AF%94%E8%BE%83.html"/>
    <id>http://nilhy.cn/2017/10/03/iOS/Swift/Swift-重写与重载的使用和比较.html</id>
    <published>2017-10-03T06:11:09.000Z</published>
    <updated>2019-04-19T13:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-重载"><a href="#1-重载" class="headerlink" title="1.重载:"></a>1.重载:</h3><ul><li>函数名相同，参数名;参数类型;参数个数不同</li><li>重载函数并不仅仅局限于构造函数</li><li>函数重载是面相对象程序设计语言的重要标志</li><li>OC 不支持函数重载，OC 的替代方式是 withXXX…</li></ul><h3 id="2-重写："><a href="#2-重写：" class="headerlink" title="2. 重写："></a>2. 重写：</h3><ul><li>也叫覆盖，指在子类中定义一个与父类中方法同名同参数列表的方法。</li><li>重写是子类的方法覆盖父类的方法，要求方法名和参数都相同</li><li>因为子类会继承父类的方法，而重写就是将从父类继承过来的方法重新定义一次，重新填写方法中的代码。</li><li>重写必须继承，重载不用</li><li>假设有一个Person类,用于 <code>name</code> 和 <code>age</code> 两个属性,我们分别用重写和重载方法为其添加属性</li></ul><a id="more"></a><h4 id="创建Person类"><a href="#创建Person类" class="headerlink" title="创建Person类"></a>创建Person类</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>     <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>,age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age  = age</span><br><span class="line">        <span class="comment">// 必须在 super.init() 之前 初始化对象</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过重写方法为其添加-“lesson”-属性"><a href="#通过重写方法为其添加-“lesson”-属性" class="headerlink" title="通过重写方法为其添加 “lesson” 属性"></a>通过重写方法为其添加 “lesson” 属性</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lesson: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 重写</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - name: 姓名</span></span><br><span class="line">    <span class="comment">///   - age:  年龄</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">        lesson = <span class="string">"Python"</span> <span class="comment">// 必须放在super.init()之前</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, age: age)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 重写实例化的对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="type">Student</span>(name: <span class="string">"Joyce"</span>, age: <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(s.lesson) <span class="comment">// Python</span></span><br></pre></td></tr></table></figure><h4 id="通过重载方法为其添加-“lesson”-属性"><a href="#通过重载方法为其添加-“lesson”-属性" class="headerlink" title="通过重载方法为其添加 “lesson” 属性"></a>通过重载方法为其添加 “lesson” 属性</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lesson: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 重载</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - name: 姓名</span></span><br><span class="line">    <span class="comment">///   - age:  年龄</span></span><br><span class="line">    <span class="comment">///   - lesson: 课程</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>, lesson:<span class="type">String</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.lesson = lesson</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, age: age)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 重载实例化的对象</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="type">Student</span>(name: <span class="string">"Yang"</span>, age: <span class="number">24</span>, lesson: <span class="string">"iOS"</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.lesson) <span class="comment">// iOS</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ul><li>通过重载,可以快速为方法添加新的属性,属性可以通过外部传入</li><li>重写,只能在方法内部设置属性,外部无法直观看到类的参数列表</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-重载&quot;&gt;&lt;a href=&quot;#1-重载&quot; class=&quot;headerlink&quot; title=&quot;1.重载:&quot;&gt;&lt;/a&gt;1.重载:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数名相同，参数名;参数类型;参数个数不同&lt;/li&gt;
&lt;li&gt;重载函数并不仅仅局限于构造函数&lt;/li&gt;
&lt;li&gt;函数重载是面相对象程序设计语言的重要标志&lt;/li&gt;
&lt;li&gt;OC 不支持函数重载，OC 的替代方式是 withXXX…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-重写：&quot;&gt;&lt;a href=&quot;#2-重写：&quot; class=&quot;headerlink&quot; title=&quot;2. 重写：&quot;&gt;&lt;/a&gt;2. 重写：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;也叫覆盖，指在子类中定义一个与父类中方法同名同参数列表的方法。&lt;/li&gt;
&lt;li&gt;重写是子类的方法覆盖父类的方法，要求方法名和参数都相同&lt;/li&gt;
&lt;li&gt;因为子类会继承父类的方法，而重写就是将从父类继承过来的方法重新定义一次，重新填写方法中的代码。&lt;/li&gt;
&lt;li&gt;重写必须继承，重载不用&lt;/li&gt;
&lt;li&gt;假设有一个Person类,用于 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;age&lt;/code&gt; 两个属性,我们分别用重写和重载方法为其添加属性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://nilhy.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>swift-类和结构体(class&amp;struct)</title>
    <link href="http://nilhy.cn/2017/10/02/swift-class&amp;struct.html"/>
    <id>http://nilhy.cn/2017/10/02/swift-class&amp;struct.html</id>
    <published>2017-10-02T14:43:42.000Z</published>
    <updated>2019-04-20T13:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="较传统的OC语言，swift使用了更多的结构体-在-swift-中，所有的基本类型-都是结构体类型"><a href="#较传统的OC语言，swift使用了更多的结构体-在-swift-中，所有的基本类型-都是结构体类型" class="headerlink" title="较传统的OC语言，swift使用了更多的结构体,在 swift 中，所有的基本类型,都是结构体类型"></a>较传统的OC语言，swift使用了更多的结构体,在 swift 中，所有的基本类型,都是结构体类型</h3><ul><li>整数（Integer）</li><li>浮点数（floating-point）</li><li>布尔值（Boolean）</li><li>字符串（string)</li><li>数组（array)</li><li>字典（dictionary）</li></ul><hr><h3 id="在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型："><a href="#在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：" class="headerlink" title="在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型："></a>在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：</h3><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><blockquote><p>引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝</p></blockquote><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><blockquote><p>它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制</p></blockquote><a id="more"></a><h3 id="类和结构体对比"><a href="#类和结构体对比" class="headerlink" title="类和结构体对比"></a>类和结构体对比</h3><h4 id="本质区别："><a href="#本质区别：" class="headerlink" title="本质区别："></a>本质区别：</h4><ul><li>类是引用类型，实例是通过引用传递</li><li>结构体是值类型，实例是通过值传递</li></ul><h4 id="swift-中类和结构体有很多共同点"><a href="#swift-中类和结构体有很多共同点" class="headerlink" title="swift 中类和结构体有很多共同点"></a>swift 中类和结构体有很多共同点</h4><ul><li>定义属性用于存储值</li><li>定义方法用于提供功能</li><li>定义下标操作使得可以通过下标语法来访问实例所包含的值</li><li>定义构造器用于生成初始化值</li><li>通过扩展以增加默认实现的功能</li><li>实现协议以提供某种标准功能</li></ul><h4 id="与结构体相比，类还有如下的附加功能"><a href="#与结构体相比，类还有如下的附加功能" class="headerlink" title="与结构体相比，类还有如下的附加功能"></a>与结构体相比，类还有如下的附加功能</h4><ul><li>继承允许一个类继承另一个类的特征</li><li>类型转换允许在运行时检查和解释一个类实例的类型</li><li>析构器允许一个类实例释放任何其所被分配的资源</li><li>引用计数允许对一个类的多次引用</li></ul><h4 id="结构体和类的定义语法"><a href="#结构体和类的定义语法" class="headerlink" title="结构体和类的定义语法"></a>结构体和类的定义语法</h4><h5 id="结构体定义语法"><a href="#结构体定义语法" class="headerlink" title="结构体定义语法"></a>结构体定义语法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里定义结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有结构体都有一个自动生成的成员逐一构造器，用于初始化新结构体实例中成员的属性</p><h5 id="类定义语法-（一）"><a href="#类定义语法-（一）" class="headerlink" title="类定义语法 （一）"></a>类定义语法 （一）</h5><blockquote><p>不继承NSObject的类，叫做基类</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里定义类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类定义语法-（二）"><a href="#类定义语法-（二）" class="headerlink" title="类定义语法 （二）"></a>类定义语法 （二）</h5><blockquote><p>这种类继承自NSObject,可以使用OC中的 NSObject 的特性 eg:KVO,runtime</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里定义类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类和结构体使用注意"><a href="#类和结构体使用注意" class="headerlink" title="类和结构体使用注意"></a>类和结构体使用注意</h4><p>类是引用类型，其属性如果是可变类型，可以直接修改，修改后类型不变<br>结构体是值类型，初始化完成后，一般情况下，不允许修改其属性；如果修改其属性，会生成一个新的结构体；如果想不改变结构体的类型，需要定义一个mutating修饰的方法，专门用来修改其属性</p><h4 id="写时复制-copy-on-write"><a href="#写时复制-copy-on-write" class="headerlink" title="写时复制 (copy-on-write)"></a>写时复制 (copy-on-write)</h4><p>swift用了大量的结构体，每次修改都是复制一份，是不是很浪费内存？</p><p>答：在 swift 标准库中，像是 Array，Dictionary 和 Set 这样的集合类型是通过一种叫做写时复制 (copy-on-write) 的技术实现的，该技术优化了这一问题，让结构体在核合适的时候才进行复制。</p><h4 id="类和结构体的选择"><a href="#类和结构体的选择" class="headerlink" title="类和结构体的选择"></a>类和结构体的选择</h4><p>当符合一条或多条以下条件时，请考虑构建结构体：</p><ul><li>该数据结构的主要目的是用来封装少量相关简单数据值；</li><li>有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用；</li><li>该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用；</li><li>该数据结构不需要去继承另一个既有类型的属性或者行为。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;较传统的OC语言，swift使用了更多的结构体-在-swift-中，所有的基本类型-都是结构体类型&quot;&gt;&lt;a href=&quot;#较传统的OC语言，swift使用了更多的结构体-在-swift-中，所有的基本类型-都是结构体类型&quot; class=&quot;headerlink&quot; title=&quot;较传统的OC语言，swift使用了更多的结构体,在 swift 中，所有的基本类型,都是结构体类型&quot;&gt;&lt;/a&gt;较传统的OC语言，swift使用了更多的结构体,在 swift 中，所有的基本类型,都是结构体类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;整数（Integer）&lt;/li&gt;
&lt;li&gt;浮点数（floating-point）&lt;/li&gt;
&lt;li&gt;布尔值（Boolean）&lt;/li&gt;
&lt;li&gt;字符串（string)&lt;/li&gt;
&lt;li&gt;数组（array)&lt;/li&gt;
&lt;li&gt;字典（dictionary）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：&quot;&gt;&lt;a href=&quot;#在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：&quot; class=&quot;headerlink&quot; title=&quot;在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：&quot;&gt;&lt;/a&gt;在比较类和结构体之间的区别之前，先了解两个概念，引用类型和值类型：&lt;/h3&gt;&lt;h4 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://nilhy.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Python-切片使用详解</title>
    <link href="http://nilhy.cn/2017/05/20/Python/basics/Python-%E5%88%87%E7%89%87%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://nilhy.cn/2017/05/20/Python/basics/Python-切片使用详解.html</id>
    <published>2017-05-20T05:49:01.000Z</published>
    <updated>2018-07-11T01:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切片含义"><a href="#切片含义" class="headerlink" title="切片含义"></a>切片含义</h3><blockquote><p>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。</p></blockquote><h3 id="切片使用"><a href="#切片使用" class="headerlink" title="切片使用"></a>切片使用</h3><blockquote><p> 切片的语法: [<code>起始</code>:<code>结束</code>:<code>步长</code>]</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abcdef'</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 取 下标0~2 的字符</span></span><br></pre></td></tr></table></figure><h4 id="1-截取所有字符串"><a href="#1-截取所有字符串" class="headerlink" title="1. 截取所有字符串"></a>1. 截取所有字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abcdef'</span></span><br><span class="line">name[:] </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 2. 截取最后一个字符串</span></span><br><span class="line">    </span><br><span class="line">```Python</span><br><span class="line">name = <span class="string">'abcdef'</span></span><br><span class="line">name[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="3-反转字符串："><a href="#3-反转字符串：" class="headerlink" title="3. 反转字符串："></a>3. 反转字符串：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abcdef'</span></span><br><span class="line">name[<span class="number">-1</span>:<span class="number">0</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><h4 id="步进数值意味着切片的方向及长度"><a href="#步进数值意味着切片的方向及长度" class="headerlink" title="步进数值意味着切片的方向及长度"></a>步进数值意味着切片的方向及长度</h4><ul><li><code>- 1</code> 倒着切片</li><li><code>+ 1</code> 默认，正常切片</li></ul><h4 id="注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身-。"><a href="#注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身-。" class="headerlink" title="注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)。*"></a>注意：选取的区间属于左闭右开型，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)。*</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;切片含义&quot;&gt;&lt;a href=&quot;#切片含义&quot; class=&quot;headerlink&quot; title=&quot;切片含义&quot;&gt;&lt;/a&gt;切片含义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;切片使用&quot;&gt;&lt;a href=&quot;#切片使用&quot; class=&quot;headerlink&quot; title=&quot;切片使用&quot;&gt;&lt;/a&gt;切片使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 切片的语法: [&lt;code&gt;起始&lt;/code&gt;:&lt;code&gt;结束&lt;/code&gt;:&lt;code&gt;步长&lt;/code&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://nilhy.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://nilhy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-string使用</title>
    <link href="http://nilhy.cn/2017/05/14/pythonstring.html"/>
    <id>http://nilhy.cn/2017/05/14/pythonstring.html</id>
    <published>2017-05-14T14:59:47.000Z</published>
    <updated>2018-07-11T01:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="string-常见操作"><a href="#string-常见操作" class="headerlink" title="string 常见操作"></a>string 常见操作</h2><p><code>&#39;mystr = &#39;hello nilhy , This is Python demo&#39;</code></p><h3 id="find"><a href="#find" class="headerlink" title="find"></a><1>find</1></h3><p>检测 <code>str</code> 是否包含在 <code>mystr</code> 中，如果是返回开始的<code>索引值</code>，否则返回 <code>-1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记住,返回的是所在位置索引值,没找到就返回-1</span></span><br><span class="line">mystr.find(str, start=<span class="number">0</span>, end=len(mystr))</span><br></pre></td></tr></table></figure><h3 id="index"><a href="#index" class="headerlink" title=" index"></a><2> index</2></h3><p>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有找到,会抛出异常'substring not found'</span></span><br><span class="line">mystr.index(str, start=<span class="number">0</span>, end=len(mystr))</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="count"><a href="#count" class="headerlink" title="count"></a><3>count</3></h3><p>返回 str在start和end之间 在 mystr里面出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.count(str, start=<span class="number">0</span>, end=len(mystr))</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a><4>replace</4></h3><p>把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记住这里替换之后会返回一个新的字符串</span></span><br><span class="line">mystr.replace(str1, str2,  mystr.count(str1))</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a><5>split</5></h3><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照空格字符串拆分,参数2为最大拆分数</span></span><br><span class="line">mystr.split(str=<span class="string">" "</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a><6>capitalize</6></h3><p>把字符串的第一个字符大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.capitalize()</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a><7>title</7></h3><p>把字符串的每个单词首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"hello jianshu"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.title()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello Jianshu'</span></span><br></pre></td></tr></table></figure><h3 id="startswith"><a href="#startswith" class="headerlink" title="startswith"></a><8>startswith</8></h3><p>检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.startswith(obj)</span><br></pre></td></tr></table></figure><h3 id="endswith"><a href="#endswith" class="headerlink" title="endswith"></a><9>endswith</9></h3><p>检查字符串是否以obj结束，如果是返回True,否则返回 False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.endswith(obj)</span><br></pre></td></tr></table></figure><h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a><10>lower</10></h3><p>转换 mystr 中所有大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.lower()</span><br></pre></td></tr></table></figure><h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a><11>upper</11></h3><p>转换 mystr 中的小写字母为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.upper()</span><br></pre></td></tr></table></figure><h3 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a><12>ljust</12></h3><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.ljust(width)</span><br></pre></td></tr></table></figure><h3 id="rjust"><a href="#rjust" class="headerlink" title="rjust"></a><13>rjust</13></h3><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rjust(width)</span><br></pre></td></tr></table></figure><h3 id="center"><a href="#center" class="headerlink" title="center"></a><14>center</14></h3><p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.center(width)</span><br></pre></td></tr></table></figure><h3 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip"></a><15>lstrip</15></h3><p>删除 mystr 左边的空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure><h3 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip"></a><16>rstrip</16></h3><p>删除 mystr 字符串末尾的空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a><17>strip</17></h3><p>删除mystr字符串两端的空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只是去除两端字符串,如果 'jian shu', 中间存在空格,则不去除中间的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"\n\t jianshu \t\n"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.strip()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'jianshu'</span></span><br></pre></td></tr></table></figure><h3 id="rfind"><a href="#rfind" class="headerlink" title="rfind"></a><18>rfind</18></h3><p>类似于 find()函数，不过是从右边开始查找.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rfind(str, start=<span class="number">0</span>,end=len(mystr) )</span><br></pre></td></tr></table></figure><h3 id="rindex"><a href="#rindex" class="headerlink" title="rindex"></a><19>rindex</19></h3><p>类似于 index()，不过是从右边开始.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rindex( str, start=<span class="number">0</span>,end=len(mystr))</span><br></pre></td></tr></table></figure><h3 id="partition-分区-分成3段"><a href="#partition-分区-分成3段" class="headerlink" title="partition(分区, 分成3段)"></a><20>partition(分区, 分成3段)</20></h3><p>把mystr以str分割成三部分,str前，str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回一个元祖, 参数是按照那个字符串去拆分</span></span><br><span class="line">mystr.partition(str)</span><br></pre></td></tr></table></figure><h3 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a><21>rpartition</21></h3><p>类似于 partition()函数,不过是从右边开始.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从右到左,分三段</span></span><br><span class="line">mystr.rpartition(str)</span><br></pre></td></tr></table></figure><h3 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines"></a><22>splitlines</22></h3><p>按照行分隔，返回一个包含各行作为元素的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分割的字符串,按照\n  分割</span></span><br><span class="line">mystr.splitlines()</span><br></pre></td></tr></table></figure><h3 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha"></a><23>isalpha</23></h3><p>如果 mystr 所有字符都是字母 则返回 True,否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须为存字符, 空格都属于其他字符,</span></span><br><span class="line">mystr.isalpha()</span><br></pre></td></tr></table></figure><h3 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit"></a><24>isdigit</24></h3><p>如果 mystr 只包含数字则返回 True 否则返回 False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须为纯数字, 空格都属于其他字符,</span></span><br><span class="line">mystr.isdigit()</span><br></pre></td></tr></table></figure><h3 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum"></a><25>isalnum</25></h3><p>如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.isalnum()</span><br></pre></td></tr></table></figure><h3 id="isspace"><a href="#isspace" class="headerlink" title="isspace"></a><26>isspace</26></h3><p>如果 mystr 中只能包含空格，则返回 True，否则返回 False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.isspace()</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a><27>join</27></h3><p>mystr 中每个字符后面插入str,构造出一个新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法 : mystr.join(str)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strs = [<span class="string">'my'</span>,<span class="string">'name'</span>,<span class="string">'is'</span>, <span class="string">'hai'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strSpace = <span class="string">' '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strSpace.join(strs)</span><br><span class="line"><span class="comment"># 以下是输出结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is hai'</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>给定一个字符串aStr，返回使用空格或者’\t’分割后的倒数第二个子串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testStr = <span class="string">'haha nihao a \t heihei \t woshi nide \t hao \nnnn'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 即可以去除以上字符串中的所有转义和空格符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 去除\t \n 空格</span></span><br><span class="line">strList = testStr.strip()</span><br><span class="line"><span class="comment"># 2. 得到新的字符串,拼接起来</span></span><br><span class="line">newStr = <span class="string">''</span>.join(strList)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;string-常见操作&quot;&gt;&lt;a href=&quot;#string-常见操作&quot; class=&quot;headerlink&quot; title=&quot;string 常见操作&quot;&gt;&lt;/a&gt;string 常见操作&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;#39;mystr = &amp;#39;hello nilhy , This is Python demo&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;&lt;1&gt;find&lt;/1&gt;&lt;/h3&gt;&lt;p&gt;检测 &lt;code&gt;str&lt;/code&gt; 是否包含在 &lt;code&gt;mystr&lt;/code&gt; 中，如果是返回开始的&lt;code&gt;索引值&lt;/code&gt;，否则返回 &lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 记住,返回的是所在位置索引值,没找到就返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mystr.find(str, start=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, end=len(mystr))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;index&quot;&gt;&lt;a href=&quot;#index&quot; class=&quot;headerlink&quot; title=&quot; index&quot;&gt;&lt;/a&gt;&lt;2&gt; index&lt;/2&gt;&lt;/h3&gt;&lt;p&gt;跟find()方法一样，只不过如果str不在 mystr中会报一个异常.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果没有找到,会抛出异常&#39;substring not found&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mystr.index(str, start=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, end=len(mystr))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://nilhy.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://nilhy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C-不定参详解</title>
    <link href="http://nilhy.cn/2017/02/11/iOS/Objective-C/Objective-C-%E4%B8%8D%E5%AE%9A%E5%8F%82%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://nilhy.cn/2017/02/11/iOS/Objective-C/Objective-C-不定参详解.html</id>
    <published>2017-02-11T02:46:47.000Z</published>
    <updated>2019-04-19T13:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单介绍一下这个-下面会有详细的用法和解释、"><a href="#简单介绍一下这个-下面会有详细的用法和解释、" class="headerlink" title="简单介绍一下这个,下面会有详细的用法和解释、"></a>简单介绍一下这个,下面会有详细的用法和解释、</h3><blockquote><p><code>大致含义</code> : 一个可变参数函数是指一个函数拥有不定的参数，即为一个函数可接收多个参数。有时会遇到一些算术问题需要用到，比如是计算传入参数的总和，字符串的连接或是其它操作过程，在 Objective-C 里也经常使用，最经典的就是 NSLog（ C 为 printf ） ，它可以指定格式的输出，格式化输出的内容.</p></blockquote><a id="more"></a><h5 id="当然-不定参数-你也可以使用数组代替。废话不多说-直接上代码开干了…"><a href="#当然-不定参数-你也可以使用数组代替。废话不多说-直接上代码开干了…" class="headerlink" title="当然,不定参数,你也可以使用数组代替。废话不多说,直接上代码开干了…."></a>当然,不定参数,你也可以使用数组代替。废话不多说,直接上代码开干了….</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)print:(<span class="built_in">NSString</span> *)firstArg, ... <span class="built_in">NS_REQUIRES_NIL_TERMINATION</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(firstArg) &#123;</span><br><span class="line">        <span class="comment">// 1.定义一个指向个数可变的参数列表指针</span></span><br><span class="line">        va_list args;</span><br><span class="line">        <span class="comment">// 2.用于存放取出的参数</span></span><br><span class="line">        <span class="built_in">NSString</span> *arg;</span><br><span class="line">        <span class="comment">// 3.初始化变量刚定义的va_list变量，这个宏的第二个参数是第一个可变参数的前一个参数，是一个固定的参数</span></span><br><span class="line">        va_start(args, firstArg);</span><br><span class="line">        <span class="comment">// 4.遍历全部参数 va_arg返回可变的参数(a_arg的第二个参数是你要返回的参数的类型)</span></span><br><span class="line">        <span class="keyword">while</span> ((arg = va_arg(args, <span class="built_in">NSString</span> *))) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清空参数列表，并置参数指针args无效</span></span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下面就是来解释各个方法和参数的含义"><a href="#下面就是来解释各个方法和参数的含义" class="headerlink" title="下面就是来解释各个方法和参数的含义"></a>下面就是来解释各个方法和参数的含义</h3><ul><li><code>va_list</code> : 用来保存宏 <code>va_start</code> 、<code>va_arg</code> 和 <code>va_end</code>所需信息的一种类型。为了访问变长参数列表中的参数，必须声明 <code>va_list</code> 类型的一个对象</li><li><code>va_start</code> : 访问变长参数列表中的参数之前使用的宏，它初始化用va_list声明的对象，初始化结果供宏<code>va_arg</code>和<code>va_end</code>使用</li><li><code>va_arg</code> : 展开成一个表达式的宏，该表达式具有变长参数列表中下一个参数的值和类型。每次调用 <code>va_arg</code> 都会修改，用 <code>va_list</code> 声明的对象从而使该对象指向参数列表中的下一个参数</li><li><code>va_end</code> : 该宏使程序能够从变长参数列表用宏 va_start 引用的函数中正常返回</li><li><code>NS_REQUIRES_NIL_TERMINATION</code> : 是一个宏，用于编译时非nil结尾的检查</li></ul><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><ul><li>在可变参数里，所有参数均用逗号隔开</li><li>参数结尾必须加上nil，表示参数结束</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单介绍一下这个-下面会有详细的用法和解释、&quot;&gt;&lt;a href=&quot;#简单介绍一下这个-下面会有详细的用法和解释、&quot; class=&quot;headerlink&quot; title=&quot;简单介绍一下这个,下面会有详细的用法和解释、&quot;&gt;&lt;/a&gt;简单介绍一下这个,下面会有详细的用法和解释、&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;大致含义&lt;/code&gt; : 一个可变参数函数是指一个函数拥有不定的参数，即为一个函数可接收多个参数。有时会遇到一些算术问题需要用到，比如是计算传入参数的总和，字符串的连接或是其它操作过程，在 Objective-C 里也经常使用，最经典的就是 NSLog（ C 为 printf ） ，它可以指定格式的输出，格式化输出的内容.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://nilhy.cn/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C-事件处理与如何获得最佳点击的View</title>
    <link href="http://nilhy.cn/2016/11/14/iOS/Objective-C/Objective-C-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E6%9C%80%E4%BD%B3%E7%82%B9%E5%87%BB%E7%9A%84View.html"/>
    <id>http://nilhy.cn/2016/11/14/iOS/Objective-C/Objective-C-事件处理与如何获得最佳点击的View.html</id>
    <published>2016-11-14T08:46:47.000Z</published>
    <updated>2019-04-19T13:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件的产生与传递"><a href="#事件的产生与传递" class="headerlink" title="事件的产生与传递"></a>事件的产生与传递</h3><h4 id="事件是如何产生与传递的"><a href="#事件是如何产生与传递的" class="headerlink" title="事件是如何产生与传递的?"></a>事件是如何产生与传递的?</h4><ul><li>当发生触摸事件的后,系统会将该事件加入到一个由UIApplication管理的时间队列<br>中,UIApplication会从事件队列中取出最前面的事件,并将这个事件分发下去,以便处理,主<br>窗口即Window 会在视图层次中找到一个合适的视图来处理触摸事件</li><li>触摸事件的传递是从父控件传递给子控件的,如果父控件不能接受事件,则里面的所有子控件也不能接收事件</li></ul><a id="more"></a><h4 id="当一个控件不能接受事件时-一般有几种情况"><a href="#当一个控件不能接受事件时-一般有几种情况" class="headerlink" title="当一个控件不能接受事件时,一般有几种情况"></a>当一个控件不能接受事件时,一般有几种情况</h4><ul><li>不接收用户交互:<code>userInteractionEnabled = NO</code></li><li>当一个控件隐藏时:<code>Hidden = YES</code></li><li>当一个控件为透明时</li></ul><h3 id="事件的响应"><a href="#事件的响应" class="headerlink" title="事件的响应"></a>事件的响应</h3><blockquote><p>用户点击屏幕产生的一个触摸事件,经过一系列的传递过程后,会找到一个最适合的视图来处理事件.找到最合适的视图控件后,就会调用控件的<code>touches</code>方法来作具体的事件处理.<code>touches</code>的默认做法是将事件顺着响应者链条向上传递,将事件交给上一个响应者处理</p></blockquote><ul><li>什么是响应者链条?<ul><li>由多个响应者对象连接起来的链条</li></ul></li><li>什么是响应者对象?<ul><li>继承了<code>UIResponder</code>的对象</li></ul></li><li><p>如何去寻找上一个响应者</p><ul><li>1.如果当前的View是控制器的View,那么控制器就是上一个响应者</li><li>2.如果当前的View不是控制器的View,那么他的父控件就是上一个响应者</li><li>3.在视图层次结构的最顶级视图,如果也不能处理收到的事件或消息,则其将事件或消息传<br>递给window对象进行处理</li><li>4.如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li><li>5.如果UIApplication也不能处理该事件或消息，则将其丢弃</li></ul></li><li><p>系统是如何寻找最合适的View* </p><ul><li>1.先判断自己是否能接收触摸事件</li><li>2.再判断触摸的当前点在不在自己身上</li><li>3.如果在自己身上,它会从后往前遍历子控件,遍历出每一个控件后,重启前两步</li><li>4.如果没有符合条件的子控件,那么自身就是最合适的View</li></ul></li></ul><h3 id="在寻找最合适View的过程中-系统会调用2个方法"><a href="#在寻找最合适View的过程中-系统会调用2个方法" class="headerlink" title="在寻找最合适View的过程中,系统会调用2个方法"></a>在寻找最合适View的过程中,系统会调用2个方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用:寻找最适合的View</span></span><br><span class="line"><span class="comment">// 什么时候调用:当事件传递给当前View时就会调用这个方法</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *) hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作用:判断触摸点在不在当前的View上.</span></span><br><span class="line"><span class="comment">// 什么时候调用:在hitTest方法当中会自动调用这个方法.</span></span><br><span class="line"><span class="comment">// 注意:point必须得要跟当前View同一个坐标系.</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>) pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="那么hitTest-withEvent-方法底层是如何实现的呢"><a href="#那么hitTest-withEvent-方法底层是如何实现的呢" class="headerlink" title="那么hitTest: withEvent:方法底层是如何实现的呢?"></a>那么hitTest: withEvent:方法底层是如何实现的呢?</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断自己能否接收事件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.userInteractionEnabled == <span class="literal">NO</span> || <span class="keyword">self</span>.hidden == <span class="literal">YES</span> || <span class="keyword">self</span>.alpha &lt;= <span class="number">0.01</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触摸点在不在自己身上</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> pointInside:point withEvent:event] == <span class="literal">NO</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从后往前遍历自己的子控件(重复前面的两个步骤)</span></span><br><span class="line"><span class="keyword">int</span> count = (<span class="keyword">int</span>)<span class="keyword">self</span>.subviews.count;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = count <span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *childV = <span class="keyword">self</span>.subviews[i];</span><br><span class="line">    <span class="comment">// point必须得要跟childV相同的坐标系.</span></span><br><span class="line">    <span class="comment">// 把point转换childV坐标系上面的点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> childP = [<span class="keyword">self</span> convertPoint:point toView:childV];</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [childV hitTest:childP withEvent:event];</span><br><span class="line">    <span class="keyword">if</span> (fitView) &#123;</span><br><span class="line">        <span class="keyword">return</span> fitView;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有符合条件的子控件，那么就自己最适合处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><h3 id="在开发中或多或少会需要一些特殊的点击-这里有2个小例子供大家参考"><a href="#在开发中或多或少会需要一些特殊的点击-这里有2个小例子供大家参考" class="headerlink" title="在开发中或多或少会需要一些特殊的点击,这里有2个小例子供大家参考"></a>在开发中或多或少会需要一些特殊的点击,这里有2个小例子供大家参考</h3><ul><li>一个按钮被一个半透明的View部分遮挡,需要点击到按钮的时候,按钮始终响应</li><li>一个View超出了父视图的范围,需要点击超出范围的View也有响应</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当触摸点在按钮上的时候,才让按钮去响应事件.</span></span><br><span class="line">    <span class="comment">//把当前点转换成按钮坐标系上的点.</span></span><br><span class="line">    <span class="built_in">CGPoint</span> btnP =  [<span class="keyword">self</span> convertPoint:point toView:<span class="keyword">self</span>.btn];</span><br><span class="line">    <span class="keyword">if</span> ( [<span class="keyword">self</span>.btn pointInside:btnP withEvent:event]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.btn;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件的产生与传递&quot;&gt;&lt;a href=&quot;#事件的产生与传递&quot; class=&quot;headerlink&quot; title=&quot;事件的产生与传递&quot;&gt;&lt;/a&gt;事件的产生与传递&lt;/h3&gt;&lt;h4 id=&quot;事件是如何产生与传递的&quot;&gt;&lt;a href=&quot;#事件是如何产生与传递的&quot; class=&quot;headerlink&quot; title=&quot;事件是如何产生与传递的?&quot;&gt;&lt;/a&gt;事件是如何产生与传递的?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当发生触摸事件的后,系统会将该事件加入到一个由UIApplication管理的时间队列&lt;br&gt;中,UIApplication会从事件队列中取出最前面的事件,并将这个事件分发下去,以便处理,主&lt;br&gt;窗口即Window 会在视图层次中找到一个合适的视图来处理触摸事件&lt;/li&gt;
&lt;li&gt;触摸事件的传递是从父控件传递给子控件的,如果父控件不能接受事件,则里面的所有子控件也不能接收事件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://nilhy.cn/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://nilhy.cn/tags/Objective-C/"/>
    
  </entry>
  
</feed>
